/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentMessageService } from "../paymentMessage.service";
import { PaymentMessageCreateInput } from "./PaymentMessageCreateInput";
import { PaymentMessage } from "./PaymentMessage";
import { PaymentMessageFindManyArgs } from "./PaymentMessageFindManyArgs";
import { PaymentMessageWhereUniqueInput } from "./PaymentMessageWhereUniqueInput";
import { PaymentMessageUpdateInput } from "./PaymentMessageUpdateInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

export class PaymentMessageControllerBase {
  constructor(protected readonly service: PaymentMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentMessage })
  async createPaymentMessage(
    @common.Body() data: PaymentMessageCreateInput
  ): Promise<PaymentMessage> {
    return await this.service.createPaymentMessage({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        swiftCode: true,
        beneficiaryAccount: true,
        transactionAmount: true,
        currency: true,
        paymentDescription: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentMessage] })
  @ApiNestedQuery(PaymentMessageFindManyArgs)
  async paymentMessages(
    @common.Req() request: Request
  ): Promise<PaymentMessage[]> {
    const args = plainToClass(PaymentMessageFindManyArgs, request.query);
    return this.service.paymentMessages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        swiftCode: true,
        beneficiaryAccount: true,
        transactionAmount: true,
        currency: true,
        paymentDescription: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentMessage(
    @common.Param() params: PaymentMessageWhereUniqueInput
  ): Promise<PaymentMessage | null> {
    const result = await this.service.paymentMessage({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        swiftCode: true,
        beneficiaryAccount: true,
        transactionAmount: true,
        currency: true,
        paymentDescription: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentMessage(
    @common.Param() params: PaymentMessageWhereUniqueInput,
    @common.Body() data: PaymentMessageUpdateInput
  ): Promise<PaymentMessage | null> {
    try {
      return await this.service.updatePaymentMessage({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          swiftCode: true,
          beneficiaryAccount: true,
          transactionAmount: true,
          currency: true,
          paymentDescription: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentMessage(
    @common.Param() params: PaymentMessageWhereUniqueInput
  ): Promise<PaymentMessage | null> {
    try {
      return await this.service.deletePaymentMessage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          swiftCode: true,
          beneficiaryAccount: true,
          transactionAmount: true,
          currency: true,
          paymentDescription: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: PaymentMessageWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        transactionId: true,
        amount: true,
        transactionDate: true,

        paymentMessage: {
          select: {
            id: true,
          },
        },

        account: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: PaymentMessageWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updatePaymentMessage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: PaymentMessageWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updatePaymentMessage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: PaymentMessageWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updatePaymentMessage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
