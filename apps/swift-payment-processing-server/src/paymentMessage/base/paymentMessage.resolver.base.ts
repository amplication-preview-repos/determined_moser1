/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentMessage } from "./PaymentMessage";
import { PaymentMessageCountArgs } from "./PaymentMessageCountArgs";
import { PaymentMessageFindManyArgs } from "./PaymentMessageFindManyArgs";
import { PaymentMessageFindUniqueArgs } from "./PaymentMessageFindUniqueArgs";
import { CreatePaymentMessageArgs } from "./CreatePaymentMessageArgs";
import { UpdatePaymentMessageArgs } from "./UpdatePaymentMessageArgs";
import { DeletePaymentMessageArgs } from "./DeletePaymentMessageArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { PaymentMessageService } from "../paymentMessage.service";
@graphql.Resolver(() => PaymentMessage)
export class PaymentMessageResolverBase {
  constructor(protected readonly service: PaymentMessageService) {}

  async _paymentMessagesMeta(
    @graphql.Args() args: PaymentMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentMessage])
  async paymentMessages(
    @graphql.Args() args: PaymentMessageFindManyArgs
  ): Promise<PaymentMessage[]> {
    return this.service.paymentMessages(args);
  }

  @graphql.Query(() => PaymentMessage, { nullable: true })
  async paymentMessage(
    @graphql.Args() args: PaymentMessageFindUniqueArgs
  ): Promise<PaymentMessage | null> {
    const result = await this.service.paymentMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentMessage)
  async createPaymentMessage(
    @graphql.Args() args: CreatePaymentMessageArgs
  ): Promise<PaymentMessage> {
    return await this.service.createPaymentMessage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentMessage)
  async updatePaymentMessage(
    @graphql.Args() args: UpdatePaymentMessageArgs
  ): Promise<PaymentMessage | null> {
    try {
      return await this.service.updatePaymentMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentMessage)
  async deletePaymentMessage(
    @graphql.Args() args: DeletePaymentMessageArgs
  ): Promise<PaymentMessage | null> {
    try {
      return await this.service.deletePaymentMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  async findTransactions(
    @graphql.Parent() parent: PaymentMessage,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
