/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaymentMessage as PrismaPaymentMessage,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class PaymentMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentMessage.count(args);
  }

  async paymentMessages(
    args: Prisma.PaymentMessageFindManyArgs
  ): Promise<PrismaPaymentMessage[]> {
    return this.prisma.paymentMessage.findMany(args);
  }
  async paymentMessage(
    args: Prisma.PaymentMessageFindUniqueArgs
  ): Promise<PrismaPaymentMessage | null> {
    return this.prisma.paymentMessage.findUnique(args);
  }
  async createPaymentMessage(
    args: Prisma.PaymentMessageCreateArgs
  ): Promise<PrismaPaymentMessage> {
    return this.prisma.paymentMessage.create(args);
  }
  async updatePaymentMessage(
    args: Prisma.PaymentMessageUpdateArgs
  ): Promise<PrismaPaymentMessage> {
    return this.prisma.paymentMessage.update(args);
  }
  async deletePaymentMessage(
    args: Prisma.PaymentMessageDeleteArgs
  ): Promise<PrismaPaymentMessage> {
    return this.prisma.paymentMessage.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.paymentMessage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
